// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: appearances/appearances.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PLAYER_ACTION int32

const (
	PLAYER_ACTION_PLAYER_ACTION_NONE               PLAYER_ACTION = 0
	PLAYER_ACTION_PLAYER_ACTION_LOOK               PLAYER_ACTION = 1
	PLAYER_ACTION_PLAYER_ACTION_USE                PLAYER_ACTION = 2
	PLAYER_ACTION_PLAYER_ACTION_OPEN               PLAYER_ACTION = 3
	PLAYER_ACTION_PLAYER_ACTION_AUTOWALK_HIGHLIGHT PLAYER_ACTION = 4
)

// Enum value maps for PLAYER_ACTION.
var (
	PLAYER_ACTION_name = map[int32]string{
		0: "PLAYER_ACTION_NONE",
		1: "PLAYER_ACTION_LOOK",
		2: "PLAYER_ACTION_USE",
		3: "PLAYER_ACTION_OPEN",
		4: "PLAYER_ACTION_AUTOWALK_HIGHLIGHT",
	}
	PLAYER_ACTION_value = map[string]int32{
		"PLAYER_ACTION_NONE":               0,
		"PLAYER_ACTION_LOOK":               1,
		"PLAYER_ACTION_USE":                2,
		"PLAYER_ACTION_OPEN":               3,
		"PLAYER_ACTION_AUTOWALK_HIGHLIGHT": 4,
	}
)

func (x PLAYER_ACTION) Enum() *PLAYER_ACTION {
	p := new(PLAYER_ACTION)
	*p = x
	return p
}

func (x PLAYER_ACTION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PLAYER_ACTION) Descriptor() protoreflect.EnumDescriptor {
	return file_appearances_appearances_proto_enumTypes[0].Descriptor()
}

func (PLAYER_ACTION) Type() protoreflect.EnumType {
	return &file_appearances_appearances_proto_enumTypes[0]
}

func (x PLAYER_ACTION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PLAYER_ACTION) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PLAYER_ACTION(num)
	return nil
}

// Deprecated: Use PLAYER_ACTION.Descriptor instead.
func (PLAYER_ACTION) EnumDescriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{0}
}

type ITEM_CATEGORY int32

const (
	ITEM_CATEGORY_ITEM_CATEGORY_ARMORS            ITEM_CATEGORY = 1
	ITEM_CATEGORY_ITEM_CATEGORY_AMULETS           ITEM_CATEGORY = 2
	ITEM_CATEGORY_ITEM_CATEGORY_BOOTS             ITEM_CATEGORY = 3
	ITEM_CATEGORY_ITEM_CATEGORY_CONTAINERS        ITEM_CATEGORY = 4
	ITEM_CATEGORY_ITEM_CATEGORY_DECORATION        ITEM_CATEGORY = 5
	ITEM_CATEGORY_ITEM_CATEGORY_FOOD              ITEM_CATEGORY = 6
	ITEM_CATEGORY_ITEM_CATEGORY_HELMETS_HATS      ITEM_CATEGORY = 7
	ITEM_CATEGORY_ITEM_CATEGORY_LEGS              ITEM_CATEGORY = 8
	ITEM_CATEGORY_ITEM_CATEGORY_OTHERS            ITEM_CATEGORY = 9
	ITEM_CATEGORY_ITEM_CATEGORY_POTIONS           ITEM_CATEGORY = 10
	ITEM_CATEGORY_ITEM_CATEGORY_RINGS             ITEM_CATEGORY = 11
	ITEM_CATEGORY_ITEM_CATEGORY_RUNES             ITEM_CATEGORY = 12
	ITEM_CATEGORY_ITEM_CATEGORY_SHIELDS           ITEM_CATEGORY = 13
	ITEM_CATEGORY_ITEM_CATEGORY_TOOLS             ITEM_CATEGORY = 14
	ITEM_CATEGORY_ITEM_CATEGORY_VALUABLES         ITEM_CATEGORY = 15
	ITEM_CATEGORY_ITEM_CATEGORY_AMMUNITION        ITEM_CATEGORY = 16
	ITEM_CATEGORY_ITEM_CATEGORY_AXES              ITEM_CATEGORY = 17
	ITEM_CATEGORY_ITEM_CATEGORY_CLUBS             ITEM_CATEGORY = 18
	ITEM_CATEGORY_ITEM_CATEGORY_DISTANCE_WEAPONS  ITEM_CATEGORY = 19
	ITEM_CATEGORY_ITEM_CATEGORY_SWORDS            ITEM_CATEGORY = 20
	ITEM_CATEGORY_ITEM_CATEGORY_WANDS_RODS        ITEM_CATEGORY = 21
	ITEM_CATEGORY_ITEM_CATEGORY_PREMIUM_SCROLLS   ITEM_CATEGORY = 22
	ITEM_CATEGORY_ITEM_CATEGORY_TIBIA_COINS       ITEM_CATEGORY = 23
	ITEM_CATEGORY_ITEM_CATEGORY_CREATURE_PRODUCTS ITEM_CATEGORY = 24
	ITEM_CATEGORY_ITEM_CATEGORY_QUIVER            ITEM_CATEGORY = 25
)

// Enum value maps for ITEM_CATEGORY.
var (
	ITEM_CATEGORY_name = map[int32]string{
		1:  "ITEM_CATEGORY_ARMORS",
		2:  "ITEM_CATEGORY_AMULETS",
		3:  "ITEM_CATEGORY_BOOTS",
		4:  "ITEM_CATEGORY_CONTAINERS",
		5:  "ITEM_CATEGORY_DECORATION",
		6:  "ITEM_CATEGORY_FOOD",
		7:  "ITEM_CATEGORY_HELMETS_HATS",
		8:  "ITEM_CATEGORY_LEGS",
		9:  "ITEM_CATEGORY_OTHERS",
		10: "ITEM_CATEGORY_POTIONS",
		11: "ITEM_CATEGORY_RINGS",
		12: "ITEM_CATEGORY_RUNES",
		13: "ITEM_CATEGORY_SHIELDS",
		14: "ITEM_CATEGORY_TOOLS",
		15: "ITEM_CATEGORY_VALUABLES",
		16: "ITEM_CATEGORY_AMMUNITION",
		17: "ITEM_CATEGORY_AXES",
		18: "ITEM_CATEGORY_CLUBS",
		19: "ITEM_CATEGORY_DISTANCE_WEAPONS",
		20: "ITEM_CATEGORY_SWORDS",
		21: "ITEM_CATEGORY_WANDS_RODS",
		22: "ITEM_CATEGORY_PREMIUM_SCROLLS",
		23: "ITEM_CATEGORY_TIBIA_COINS",
		24: "ITEM_CATEGORY_CREATURE_PRODUCTS",
		25: "ITEM_CATEGORY_QUIVER",
	}
	ITEM_CATEGORY_value = map[string]int32{
		"ITEM_CATEGORY_ARMORS":            1,
		"ITEM_CATEGORY_AMULETS":           2,
		"ITEM_CATEGORY_BOOTS":             3,
		"ITEM_CATEGORY_CONTAINERS":        4,
		"ITEM_CATEGORY_DECORATION":        5,
		"ITEM_CATEGORY_FOOD":              6,
		"ITEM_CATEGORY_HELMETS_HATS":      7,
		"ITEM_CATEGORY_LEGS":              8,
		"ITEM_CATEGORY_OTHERS":            9,
		"ITEM_CATEGORY_POTIONS":           10,
		"ITEM_CATEGORY_RINGS":             11,
		"ITEM_CATEGORY_RUNES":             12,
		"ITEM_CATEGORY_SHIELDS":           13,
		"ITEM_CATEGORY_TOOLS":             14,
		"ITEM_CATEGORY_VALUABLES":         15,
		"ITEM_CATEGORY_AMMUNITION":        16,
		"ITEM_CATEGORY_AXES":              17,
		"ITEM_CATEGORY_CLUBS":             18,
		"ITEM_CATEGORY_DISTANCE_WEAPONS":  19,
		"ITEM_CATEGORY_SWORDS":            20,
		"ITEM_CATEGORY_WANDS_RODS":        21,
		"ITEM_CATEGORY_PREMIUM_SCROLLS":   22,
		"ITEM_CATEGORY_TIBIA_COINS":       23,
		"ITEM_CATEGORY_CREATURE_PRODUCTS": 24,
		"ITEM_CATEGORY_QUIVER":            25,
	}
)

func (x ITEM_CATEGORY) Enum() *ITEM_CATEGORY {
	p := new(ITEM_CATEGORY)
	*p = x
	return p
}

func (x ITEM_CATEGORY) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ITEM_CATEGORY) Descriptor() protoreflect.EnumDescriptor {
	return file_appearances_appearances_proto_enumTypes[1].Descriptor()
}

func (ITEM_CATEGORY) Type() protoreflect.EnumType {
	return &file_appearances_appearances_proto_enumTypes[1]
}

func (x ITEM_CATEGORY) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ITEM_CATEGORY) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ITEM_CATEGORY(num)
	return nil
}

// Deprecated: Use ITEM_CATEGORY.Descriptor instead.
func (ITEM_CATEGORY) EnumDescriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{1}
}

type PLAYER_PROFESSION int32

const (
	PLAYER_PROFESSION_PLAYER_PROFESSION_ANY      PLAYER_PROFESSION = -1
	PLAYER_PROFESSION_PLAYER_PROFESSION_NONE     PLAYER_PROFESSION = 0
	PLAYER_PROFESSION_PLAYER_PROFESSION_KNIGHT   PLAYER_PROFESSION = 1
	PLAYER_PROFESSION_PLAYER_PROFESSION_PALADIN  PLAYER_PROFESSION = 2
	PLAYER_PROFESSION_PLAYER_PROFESSION_SORCERER PLAYER_PROFESSION = 3
	PLAYER_PROFESSION_PLAYER_PROFESSION_DRUID    PLAYER_PROFESSION = 4
	PLAYER_PROFESSION_PLAYER_PROFESSION_PROMOTED PLAYER_PROFESSION = 10
)

// Enum value maps for PLAYER_PROFESSION.
var (
	PLAYER_PROFESSION_name = map[int32]string{
		-1: "PLAYER_PROFESSION_ANY",
		0:  "PLAYER_PROFESSION_NONE",
		1:  "PLAYER_PROFESSION_KNIGHT",
		2:  "PLAYER_PROFESSION_PALADIN",
		3:  "PLAYER_PROFESSION_SORCERER",
		4:  "PLAYER_PROFESSION_DRUID",
		10: "PLAYER_PROFESSION_PROMOTED",
	}
	PLAYER_PROFESSION_value = map[string]int32{
		"PLAYER_PROFESSION_ANY":      -1,
		"PLAYER_PROFESSION_NONE":     0,
		"PLAYER_PROFESSION_KNIGHT":   1,
		"PLAYER_PROFESSION_PALADIN":  2,
		"PLAYER_PROFESSION_SORCERER": 3,
		"PLAYER_PROFESSION_DRUID":    4,
		"PLAYER_PROFESSION_PROMOTED": 10,
	}
)

func (x PLAYER_PROFESSION) Enum() *PLAYER_PROFESSION {
	p := new(PLAYER_PROFESSION)
	*p = x
	return p
}

func (x PLAYER_PROFESSION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PLAYER_PROFESSION) Descriptor() protoreflect.EnumDescriptor {
	return file_appearances_appearances_proto_enumTypes[2].Descriptor()
}

func (PLAYER_PROFESSION) Type() protoreflect.EnumType {
	return &file_appearances_appearances_proto_enumTypes[2]
}

func (x PLAYER_PROFESSION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PLAYER_PROFESSION) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PLAYER_PROFESSION(num)
	return nil
}

// Deprecated: Use PLAYER_PROFESSION.Descriptor instead.
func (PLAYER_PROFESSION) EnumDescriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{2}
}

type ANIMATION_LOOP_TYPE int32

const (
	ANIMATION_LOOP_TYPE_ANIMATION_LOOP_TYPE_PINGPONG ANIMATION_LOOP_TYPE = -1
	ANIMATION_LOOP_TYPE_ANIMATION_LOOP_TYPE_INFINITE ANIMATION_LOOP_TYPE = 0
	ANIMATION_LOOP_TYPE_ANIMATION_LOOP_TYPE_COUNTED  ANIMATION_LOOP_TYPE = 1
)

// Enum value maps for ANIMATION_LOOP_TYPE.
var (
	ANIMATION_LOOP_TYPE_name = map[int32]string{
		-1: "ANIMATION_LOOP_TYPE_PINGPONG",
		0:  "ANIMATION_LOOP_TYPE_INFINITE",
		1:  "ANIMATION_LOOP_TYPE_COUNTED",
	}
	ANIMATION_LOOP_TYPE_value = map[string]int32{
		"ANIMATION_LOOP_TYPE_PINGPONG": -1,
		"ANIMATION_LOOP_TYPE_INFINITE": 0,
		"ANIMATION_LOOP_TYPE_COUNTED":  1,
	}
)

func (x ANIMATION_LOOP_TYPE) Enum() *ANIMATION_LOOP_TYPE {
	p := new(ANIMATION_LOOP_TYPE)
	*p = x
	return p
}

func (x ANIMATION_LOOP_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ANIMATION_LOOP_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_appearances_appearances_proto_enumTypes[3].Descriptor()
}

func (ANIMATION_LOOP_TYPE) Type() protoreflect.EnumType {
	return &file_appearances_appearances_proto_enumTypes[3]
}

func (x ANIMATION_LOOP_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ANIMATION_LOOP_TYPE) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ANIMATION_LOOP_TYPE(num)
	return nil
}

// Deprecated: Use ANIMATION_LOOP_TYPE.Descriptor instead.
func (ANIMATION_LOOP_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{3}
}

type HOOK_TYPE int32

const (
	HOOK_TYPE_HOOK_TYPE_SOUTH HOOK_TYPE = 1
	HOOK_TYPE_HOOK_TYPE_EAST  HOOK_TYPE = 2
)

// Enum value maps for HOOK_TYPE.
var (
	HOOK_TYPE_name = map[int32]string{
		1: "HOOK_TYPE_SOUTH",
		2: "HOOK_TYPE_EAST",
	}
	HOOK_TYPE_value = map[string]int32{
		"HOOK_TYPE_SOUTH": 1,
		"HOOK_TYPE_EAST":  2,
	}
)

func (x HOOK_TYPE) Enum() *HOOK_TYPE {
	p := new(HOOK_TYPE)
	*p = x
	return p
}

func (x HOOK_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HOOK_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_appearances_appearances_proto_enumTypes[4].Descriptor()
}

func (HOOK_TYPE) Type() protoreflect.EnumType {
	return &file_appearances_appearances_proto_enumTypes[4]
}

func (x HOOK_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HOOK_TYPE) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HOOK_TYPE(num)
	return nil
}

// Deprecated: Use HOOK_TYPE.Descriptor instead.
func (HOOK_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{4}
}

type FIXED_FRAME_GROUP int32

const (
	FIXED_FRAME_GROUP_FIXED_FRAME_GROUP_OUTFIT_IDLE    FIXED_FRAME_GROUP = 0
	FIXED_FRAME_GROUP_FIXED_FRAME_GROUP_OUTFIT_MOVING  FIXED_FRAME_GROUP = 1
	FIXED_FRAME_GROUP_FIXED_FRAME_GROUP_OBJECT_INITIAL FIXED_FRAME_GROUP = 2
)

// Enum value maps for FIXED_FRAME_GROUP.
var (
	FIXED_FRAME_GROUP_name = map[int32]string{
		0: "FIXED_FRAME_GROUP_OUTFIT_IDLE",
		1: "FIXED_FRAME_GROUP_OUTFIT_MOVING",
		2: "FIXED_FRAME_GROUP_OBJECT_INITIAL",
	}
	FIXED_FRAME_GROUP_value = map[string]int32{
		"FIXED_FRAME_GROUP_OUTFIT_IDLE":    0,
		"FIXED_FRAME_GROUP_OUTFIT_MOVING":  1,
		"FIXED_FRAME_GROUP_OBJECT_INITIAL": 2,
	}
)

func (x FIXED_FRAME_GROUP) Enum() *FIXED_FRAME_GROUP {
	p := new(FIXED_FRAME_GROUP)
	*p = x
	return p
}

func (x FIXED_FRAME_GROUP) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FIXED_FRAME_GROUP) Descriptor() protoreflect.EnumDescriptor {
	return file_appearances_appearances_proto_enumTypes[5].Descriptor()
}

func (FIXED_FRAME_GROUP) Type() protoreflect.EnumType {
	return &file_appearances_appearances_proto_enumTypes[5]
}

func (x FIXED_FRAME_GROUP) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FIXED_FRAME_GROUP) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FIXED_FRAME_GROUP(num)
	return nil
}

// Deprecated: Use FIXED_FRAME_GROUP.Descriptor instead.
func (FIXED_FRAME_GROUP) EnumDescriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{5}
}

type Coordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *uint32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y *uint32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Z *uint32 `protobuf:"varint,3,opt,name=z" json:"z,omitempty"`
}

func (x *Coordinate) Reset() {
	*x = Coordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coordinate) ProtoMessage() {}

func (x *Coordinate) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coordinate.ProtoReflect.Descriptor instead.
func (*Coordinate) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{0}
}

func (x *Coordinate) GetX() uint32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Coordinate) GetY() uint32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Coordinate) GetZ() uint32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type Appearances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object                      []*Appearance                `protobuf:"bytes,1,rep,name=object" json:"object,omitempty"`
	Outfit                      []*Appearance                `protobuf:"bytes,2,rep,name=outfit" json:"outfit,omitempty"`
	Effect                      []*Appearance                `protobuf:"bytes,3,rep,name=effect" json:"effect,omitempty"`
	Missile                     []*Appearance                `protobuf:"bytes,4,rep,name=missile" json:"missile,omitempty"`
	SpecialMeaningAppearanceIds *SpecialMeaningAppearanceIds `protobuf:"bytes,5,opt,name=special_meaning_appearance_ids,json=specialMeaningAppearanceIds" json:"special_meaning_appearance_ids,omitempty"`
}

func (x *Appearances) Reset() {
	*x = Appearances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appearances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appearances) ProtoMessage() {}

func (x *Appearances) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appearances.ProtoReflect.Descriptor instead.
func (*Appearances) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{1}
}

func (x *Appearances) GetObject() []*Appearance {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *Appearances) GetOutfit() []*Appearance {
	if x != nil {
		return x.Outfit
	}
	return nil
}

func (x *Appearances) GetEffect() []*Appearance {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *Appearances) GetMissile() []*Appearance {
	if x != nil {
		return x.Missile
	}
	return nil
}

func (x *Appearances) GetSpecialMeaningAppearanceIds() *SpecialMeaningAppearanceIds {
	if x != nil {
		return x.SpecialMeaningAppearanceIds
	}
	return nil
}

type SpritePhase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationMin *uint32 `protobuf:"varint,1,opt,name=duration_min,json=durationMin" json:"duration_min,omitempty"`
	DurationMax *uint32 `protobuf:"varint,2,opt,name=duration_max,json=durationMax" json:"duration_max,omitempty"`
}

func (x *SpritePhase) Reset() {
	*x = SpritePhase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpritePhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpritePhase) ProtoMessage() {}

func (x *SpritePhase) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpritePhase.ProtoReflect.Descriptor instead.
func (*SpritePhase) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{2}
}

func (x *SpritePhase) GetDurationMin() uint32 {
	if x != nil && x.DurationMin != nil {
		return *x.DurationMin
	}
	return 0
}

func (x *SpritePhase) GetDurationMax() uint32 {
	if x != nil && x.DurationMax != nil {
		return *x.DurationMax
	}
	return 0
}

type SpriteAnimation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultStartPhase *uint32              `protobuf:"varint,1,opt,name=default_start_phase,json=defaultStartPhase" json:"default_start_phase,omitempty"`
	Synchronized      *bool                `protobuf:"varint,2,opt,name=synchronized" json:"synchronized,omitempty"`
	RandomStartPhase  *bool                `protobuf:"varint,3,opt,name=random_start_phase,json=randomStartPhase" json:"random_start_phase,omitempty"`
	LoopType          *ANIMATION_LOOP_TYPE `protobuf:"varint,4,opt,name=loop_type,json=loopType,enum=ANIMATION_LOOP_TYPE" json:"loop_type,omitempty"`
	LoopCount         *uint32              `protobuf:"varint,5,opt,name=loop_count,json=loopCount" json:"loop_count,omitempty"`
	SpritePhase       []*SpritePhase       `protobuf:"bytes,6,rep,name=sprite_phase,json=spritePhase" json:"sprite_phase,omitempty"`
}

func (x *SpriteAnimation) Reset() {
	*x = SpriteAnimation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpriteAnimation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpriteAnimation) ProtoMessage() {}

func (x *SpriteAnimation) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpriteAnimation.ProtoReflect.Descriptor instead.
func (*SpriteAnimation) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{3}
}

func (x *SpriteAnimation) GetDefaultStartPhase() uint32 {
	if x != nil && x.DefaultStartPhase != nil {
		return *x.DefaultStartPhase
	}
	return 0
}

func (x *SpriteAnimation) GetSynchronized() bool {
	if x != nil && x.Synchronized != nil {
		return *x.Synchronized
	}
	return false
}

func (x *SpriteAnimation) GetRandomStartPhase() bool {
	if x != nil && x.RandomStartPhase != nil {
		return *x.RandomStartPhase
	}
	return false
}

func (x *SpriteAnimation) GetLoopType() ANIMATION_LOOP_TYPE {
	if x != nil && x.LoopType != nil {
		return *x.LoopType
	}
	return ANIMATION_LOOP_TYPE_ANIMATION_LOOP_TYPE_PINGPONG
}

func (x *SpriteAnimation) GetLoopCount() uint32 {
	if x != nil && x.LoopCount != nil {
		return *x.LoopCount
	}
	return 0
}

func (x *SpriteAnimation) GetSpritePhase() []*SpritePhase {
	if x != nil {
		return x.SpritePhase
	}
	return nil
}

type Box struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X      *uint32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y      *uint32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Width  *uint32 `protobuf:"varint,3,opt,name=width" json:"width,omitempty"`
	Height *uint32 `protobuf:"varint,4,opt,name=height" json:"height,omitempty"`
}

func (x *Box) Reset() {
	*x = Box{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Box) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Box) ProtoMessage() {}

func (x *Box) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Box.ProtoReflect.Descriptor instead.
func (*Box) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{4}
}

func (x *Box) GetX() uint32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Box) GetY() uint32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Box) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Box) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type SpriteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatternWidth            *uint32          `protobuf:"varint,1,opt,name=pattern_width,json=patternWidth" json:"pattern_width,omitempty"`
	PatternHeight           *uint32          `protobuf:"varint,2,opt,name=pattern_height,json=patternHeight" json:"pattern_height,omitempty"`
	PatternDepth            *uint32          `protobuf:"varint,3,opt,name=pattern_depth,json=patternDepth" json:"pattern_depth,omitempty"`
	Layers                  *uint32          `protobuf:"varint,4,opt,name=layers" json:"layers,omitempty"`
	SpriteId                []uint32         `protobuf:"varint,5,rep,name=sprite_id,json=spriteId" json:"sprite_id,omitempty"`
	BoundingSquare          *uint32          `protobuf:"varint,7,opt,name=bounding_square,json=boundingSquare" json:"bounding_square,omitempty"`
	Animation               *SpriteAnimation `protobuf:"bytes,6,opt,name=animation" json:"animation,omitempty"`
	IsOpaque                *bool            `protobuf:"varint,8,opt,name=is_opaque,json=isOpaque" json:"is_opaque,omitempty"`
	BoundingBoxPerDirection []*Box           `protobuf:"bytes,9,rep,name=bounding_box_per_direction,json=boundingBoxPerDirection" json:"bounding_box_per_direction,omitempty"`
}

func (x *SpriteInfo) Reset() {
	*x = SpriteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpriteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpriteInfo) ProtoMessage() {}

func (x *SpriteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpriteInfo.ProtoReflect.Descriptor instead.
func (*SpriteInfo) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{5}
}

func (x *SpriteInfo) GetPatternWidth() uint32 {
	if x != nil && x.PatternWidth != nil {
		return *x.PatternWidth
	}
	return 0
}

func (x *SpriteInfo) GetPatternHeight() uint32 {
	if x != nil && x.PatternHeight != nil {
		return *x.PatternHeight
	}
	return 0
}

func (x *SpriteInfo) GetPatternDepth() uint32 {
	if x != nil && x.PatternDepth != nil {
		return *x.PatternDepth
	}
	return 0
}

func (x *SpriteInfo) GetLayers() uint32 {
	if x != nil && x.Layers != nil {
		return *x.Layers
	}
	return 0
}

func (x *SpriteInfo) GetSpriteId() []uint32 {
	if x != nil {
		return x.SpriteId
	}
	return nil
}

func (x *SpriteInfo) GetBoundingSquare() uint32 {
	if x != nil && x.BoundingSquare != nil {
		return *x.BoundingSquare
	}
	return 0
}

func (x *SpriteInfo) GetAnimation() *SpriteAnimation {
	if x != nil {
		return x.Animation
	}
	return nil
}

func (x *SpriteInfo) GetIsOpaque() bool {
	if x != nil && x.IsOpaque != nil {
		return *x.IsOpaque
	}
	return false
}

func (x *SpriteInfo) GetBoundingBoxPerDirection() []*Box {
	if x != nil {
		return x.BoundingBoxPerDirection
	}
	return nil
}

type FrameGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixedFrameGroup *FIXED_FRAME_GROUP `protobuf:"varint,1,opt,name=fixed_frame_group,json=fixedFrameGroup,enum=FIXED_FRAME_GROUP" json:"fixed_frame_group,omitempty"`
	Id              *uint32            `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	SpriteInfo      *SpriteInfo        `protobuf:"bytes,3,opt,name=sprite_info,json=spriteInfo" json:"sprite_info,omitempty"`
}

func (x *FrameGroup) Reset() {
	*x = FrameGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameGroup) ProtoMessage() {}

func (x *FrameGroup) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameGroup.ProtoReflect.Descriptor instead.
func (*FrameGroup) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{6}
}

func (x *FrameGroup) GetFixedFrameGroup() FIXED_FRAME_GROUP {
	if x != nil && x.FixedFrameGroup != nil {
		return *x.FixedFrameGroup
	}
	return FIXED_FRAME_GROUP_FIXED_FRAME_GROUP_OUTFIT_IDLE
}

func (x *FrameGroup) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FrameGroup) GetSpriteInfo() *SpriteInfo {
	if x != nil {
		return x.SpriteInfo
	}
	return nil
}

type Appearance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *uint32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FrameGroup  []*FrameGroup    `protobuf:"bytes,2,rep,name=frame_group,json=frameGroup" json:"frame_group,omitempty"`
	Flags       *AppearanceFlags `protobuf:"bytes,3,opt,name=flags" json:"flags,omitempty"`
	Name        []byte           `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Description []byte           `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
}

func (x *Appearance) Reset() {
	*x = Appearance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Appearance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Appearance) ProtoMessage() {}

func (x *Appearance) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Appearance.ProtoReflect.Descriptor instead.
func (*Appearance) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{7}
}

func (x *Appearance) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Appearance) GetFrameGroup() []*FrameGroup {
	if x != nil {
		return x.FrameGroup
	}
	return nil
}

func (x *Appearance) GetFlags() *AppearanceFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Appearance) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Appearance) GetDescription() []byte {
	if x != nil {
		return x.Description
	}
	return nil
}

type AppearanceFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bank                  *AppearanceFlagBank                  `protobuf:"bytes,1,opt,name=bank" json:"bank,omitempty"`
	Clip                  *bool                                `protobuf:"varint,2,opt,name=clip" json:"clip,omitempty"`
	Bottom                *bool                                `protobuf:"varint,3,opt,name=bottom" json:"bottom,omitempty"`
	Top                   *bool                                `protobuf:"varint,4,opt,name=top" json:"top,omitempty"`
	Container             *bool                                `protobuf:"varint,5,opt,name=container" json:"container,omitempty"`
	Cumulative            *bool                                `protobuf:"varint,6,opt,name=cumulative" json:"cumulative,omitempty"`
	Usable                *bool                                `protobuf:"varint,7,opt,name=usable" json:"usable,omitempty"`
	Forceuse              *bool                                `protobuf:"varint,8,opt,name=forceuse" json:"forceuse,omitempty"`
	Multiuse              *bool                                `protobuf:"varint,9,opt,name=multiuse" json:"multiuse,omitempty"`
	Write                 *AppearanceFlagWrite                 `protobuf:"bytes,10,opt,name=write" json:"write,omitempty"`
	WriteOnce             *AppearanceFlagWriteOnce             `protobuf:"bytes,11,opt,name=write_once,json=writeOnce" json:"write_once,omitempty"`
	Liquidpool            *bool                                `protobuf:"varint,12,opt,name=liquidpool" json:"liquidpool,omitempty"`
	Unpass                *bool                                `protobuf:"varint,13,opt,name=unpass" json:"unpass,omitempty"`
	Unmove                *bool                                `protobuf:"varint,14,opt,name=unmove" json:"unmove,omitempty"`
	Unsight               *bool                                `protobuf:"varint,15,opt,name=unsight" json:"unsight,omitempty"`
	Avoid                 *bool                                `protobuf:"varint,16,opt,name=avoid" json:"avoid,omitempty"`
	NoMovementAnimation   *bool                                `protobuf:"varint,17,opt,name=no_movement_animation,json=noMovementAnimation" json:"no_movement_animation,omitempty"`
	Take                  *bool                                `protobuf:"varint,18,opt,name=take" json:"take,omitempty"`
	Liquidcontainer       *bool                                `protobuf:"varint,19,opt,name=liquidcontainer" json:"liquidcontainer,omitempty"`
	Hang                  *bool                                `protobuf:"varint,20,opt,name=hang" json:"hang,omitempty"`
	Hook                  *AppearanceFlagHook                  `protobuf:"bytes,21,opt,name=hook" json:"hook,omitempty"`
	Rotate                *bool                                `protobuf:"varint,22,opt,name=rotate" json:"rotate,omitempty"`
	Light                 *AppearanceFlagLight                 `protobuf:"bytes,23,opt,name=light" json:"light,omitempty"`
	DontHide              *bool                                `protobuf:"varint,24,opt,name=dont_hide,json=dontHide" json:"dont_hide,omitempty"`
	Translucent           *bool                                `protobuf:"varint,25,opt,name=translucent" json:"translucent,omitempty"`
	Shift                 *AppearanceFlagShift                 `protobuf:"bytes,26,opt,name=shift" json:"shift,omitempty"`
	Height                *AppearanceFlagHeight                `protobuf:"bytes,27,opt,name=height" json:"height,omitempty"`
	LyingObject           *bool                                `protobuf:"varint,28,opt,name=lying_object,json=lyingObject" json:"lying_object,omitempty"`
	AnimateAlways         *bool                                `protobuf:"varint,29,opt,name=animate_always,json=animateAlways" json:"animate_always,omitempty"`
	Automap               *AppearanceFlagAutomap               `protobuf:"bytes,30,opt,name=automap" json:"automap,omitempty"`
	Lenshelp              *AppearanceFlagLenshelp              `protobuf:"bytes,31,opt,name=lenshelp" json:"lenshelp,omitempty"`
	Fullbank              *bool                                `protobuf:"varint,32,opt,name=fullbank" json:"fullbank,omitempty"`
	IgnoreLook            *bool                                `protobuf:"varint,33,opt,name=ignore_look,json=ignoreLook" json:"ignore_look,omitempty"`
	Clothes               *AppearanceFlagClothes               `protobuf:"bytes,34,opt,name=clothes" json:"clothes,omitempty"`
	DefaultAction         *AppearanceFlagDefaultAction         `protobuf:"bytes,35,opt,name=default_action,json=defaultAction" json:"default_action,omitempty"`
	Market                *AppearanceFlagMarket                `protobuf:"bytes,36,opt,name=market" json:"market,omitempty"`
	Wrap                  *bool                                `protobuf:"varint,37,opt,name=wrap" json:"wrap,omitempty"`
	Unwrap                *bool                                `protobuf:"varint,38,opt,name=unwrap" json:"unwrap,omitempty"`
	Topeffect             *bool                                `protobuf:"varint,39,opt,name=topeffect" json:"topeffect,omitempty"`
	Npcsaledata           []*AppearanceFlagNPC                 `protobuf:"bytes,40,rep,name=npcsaledata" json:"npcsaledata,omitempty"`
	Changedtoexpire       *AppearanceFlagChangedToExpire       `protobuf:"bytes,41,opt,name=changedtoexpire" json:"changedtoexpire,omitempty"`
	Corpse                *bool                                `protobuf:"varint,42,opt,name=corpse" json:"corpse,omitempty"`
	PlayerCorpse          *bool                                `protobuf:"varint,43,opt,name=player_corpse,json=playerCorpse" json:"player_corpse,omitempty"`
	Cyclopediaitem        *AppearanceFlagCyclopedia            `protobuf:"bytes,44,opt,name=cyclopediaitem" json:"cyclopediaitem,omitempty"`
	Ammo                  *bool                                `protobuf:"varint,45,opt,name=ammo" json:"ammo,omitempty"`
	ShowOffSocket         *bool                                `protobuf:"varint,46,opt,name=show_off_socket,json=showOffSocket" json:"show_off_socket,omitempty"`
	Reportable            *bool                                `protobuf:"varint,47,opt,name=reportable" json:"reportable,omitempty"`
	Upgradeclassification *AppearanceFlagUpgradeClassification `protobuf:"bytes,48,opt,name=upgradeclassification" json:"upgradeclassification,omitempty"`
	ReverseAddonsEast     *bool                                `protobuf:"varint,49,opt,name=reverse_addons_east,json=reverseAddonsEast" json:"reverse_addons_east,omitempty"`
	ReverseAddonsWest     *bool                                `protobuf:"varint,50,opt,name=reverse_addons_west,json=reverseAddonsWest" json:"reverse_addons_west,omitempty"`
	ReverseAddonsSouth    *bool                                `protobuf:"varint,51,opt,name=reverse_addons_south,json=reverseAddonsSouth" json:"reverse_addons_south,omitempty"`
	ReverseAddonsNorth    *bool                                `protobuf:"varint,52,opt,name=reverse_addons_north,json=reverseAddonsNorth" json:"reverse_addons_north,omitempty"`
	Wearout               *bool                                `protobuf:"varint,53,opt,name=wearout" json:"wearout,omitempty"`
	Clockexpire           *bool                                `protobuf:"varint,54,opt,name=clockexpire" json:"clockexpire,omitempty"`
	Expire                *bool                                `protobuf:"varint,55,opt,name=expire" json:"expire,omitempty"`
	Expirestop            *bool                                `protobuf:"varint,56,opt,name=expirestop" json:"expirestop,omitempty"`
}

func (x *AppearanceFlags) Reset() {
	*x = AppearanceFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlags) ProtoMessage() {}

func (x *AppearanceFlags) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlags.ProtoReflect.Descriptor instead.
func (*AppearanceFlags) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{8}
}

func (x *AppearanceFlags) GetBank() *AppearanceFlagBank {
	if x != nil {
		return x.Bank
	}
	return nil
}

func (x *AppearanceFlags) GetClip() bool {
	if x != nil && x.Clip != nil {
		return *x.Clip
	}
	return false
}

func (x *AppearanceFlags) GetBottom() bool {
	if x != nil && x.Bottom != nil {
		return *x.Bottom
	}
	return false
}

func (x *AppearanceFlags) GetTop() bool {
	if x != nil && x.Top != nil {
		return *x.Top
	}
	return false
}

func (x *AppearanceFlags) GetContainer() bool {
	if x != nil && x.Container != nil {
		return *x.Container
	}
	return false
}

func (x *AppearanceFlags) GetCumulative() bool {
	if x != nil && x.Cumulative != nil {
		return *x.Cumulative
	}
	return false
}

func (x *AppearanceFlags) GetUsable() bool {
	if x != nil && x.Usable != nil {
		return *x.Usable
	}
	return false
}

func (x *AppearanceFlags) GetForceuse() bool {
	if x != nil && x.Forceuse != nil {
		return *x.Forceuse
	}
	return false
}

func (x *AppearanceFlags) GetMultiuse() bool {
	if x != nil && x.Multiuse != nil {
		return *x.Multiuse
	}
	return false
}

func (x *AppearanceFlags) GetWrite() *AppearanceFlagWrite {
	if x != nil {
		return x.Write
	}
	return nil
}

func (x *AppearanceFlags) GetWriteOnce() *AppearanceFlagWriteOnce {
	if x != nil {
		return x.WriteOnce
	}
	return nil
}

func (x *AppearanceFlags) GetLiquidpool() bool {
	if x != nil && x.Liquidpool != nil {
		return *x.Liquidpool
	}
	return false
}

func (x *AppearanceFlags) GetUnpass() bool {
	if x != nil && x.Unpass != nil {
		return *x.Unpass
	}
	return false
}

func (x *AppearanceFlags) GetUnmove() bool {
	if x != nil && x.Unmove != nil {
		return *x.Unmove
	}
	return false
}

func (x *AppearanceFlags) GetUnsight() bool {
	if x != nil && x.Unsight != nil {
		return *x.Unsight
	}
	return false
}

func (x *AppearanceFlags) GetAvoid() bool {
	if x != nil && x.Avoid != nil {
		return *x.Avoid
	}
	return false
}

func (x *AppearanceFlags) GetNoMovementAnimation() bool {
	if x != nil && x.NoMovementAnimation != nil {
		return *x.NoMovementAnimation
	}
	return false
}

func (x *AppearanceFlags) GetTake() bool {
	if x != nil && x.Take != nil {
		return *x.Take
	}
	return false
}

func (x *AppearanceFlags) GetLiquidcontainer() bool {
	if x != nil && x.Liquidcontainer != nil {
		return *x.Liquidcontainer
	}
	return false
}

func (x *AppearanceFlags) GetHang() bool {
	if x != nil && x.Hang != nil {
		return *x.Hang
	}
	return false
}

func (x *AppearanceFlags) GetHook() *AppearanceFlagHook {
	if x != nil {
		return x.Hook
	}
	return nil
}

func (x *AppearanceFlags) GetRotate() bool {
	if x != nil && x.Rotate != nil {
		return *x.Rotate
	}
	return false
}

func (x *AppearanceFlags) GetLight() *AppearanceFlagLight {
	if x != nil {
		return x.Light
	}
	return nil
}

func (x *AppearanceFlags) GetDontHide() bool {
	if x != nil && x.DontHide != nil {
		return *x.DontHide
	}
	return false
}

func (x *AppearanceFlags) GetTranslucent() bool {
	if x != nil && x.Translucent != nil {
		return *x.Translucent
	}
	return false
}

func (x *AppearanceFlags) GetShift() *AppearanceFlagShift {
	if x != nil {
		return x.Shift
	}
	return nil
}

func (x *AppearanceFlags) GetHeight() *AppearanceFlagHeight {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *AppearanceFlags) GetLyingObject() bool {
	if x != nil && x.LyingObject != nil {
		return *x.LyingObject
	}
	return false
}

func (x *AppearanceFlags) GetAnimateAlways() bool {
	if x != nil && x.AnimateAlways != nil {
		return *x.AnimateAlways
	}
	return false
}

func (x *AppearanceFlags) GetAutomap() *AppearanceFlagAutomap {
	if x != nil {
		return x.Automap
	}
	return nil
}

func (x *AppearanceFlags) GetLenshelp() *AppearanceFlagLenshelp {
	if x != nil {
		return x.Lenshelp
	}
	return nil
}

func (x *AppearanceFlags) GetFullbank() bool {
	if x != nil && x.Fullbank != nil {
		return *x.Fullbank
	}
	return false
}

func (x *AppearanceFlags) GetIgnoreLook() bool {
	if x != nil && x.IgnoreLook != nil {
		return *x.IgnoreLook
	}
	return false
}

func (x *AppearanceFlags) GetClothes() *AppearanceFlagClothes {
	if x != nil {
		return x.Clothes
	}
	return nil
}

func (x *AppearanceFlags) GetDefaultAction() *AppearanceFlagDefaultAction {
	if x != nil {
		return x.DefaultAction
	}
	return nil
}

func (x *AppearanceFlags) GetMarket() *AppearanceFlagMarket {
	if x != nil {
		return x.Market
	}
	return nil
}

func (x *AppearanceFlags) GetWrap() bool {
	if x != nil && x.Wrap != nil {
		return *x.Wrap
	}
	return false
}

func (x *AppearanceFlags) GetUnwrap() bool {
	if x != nil && x.Unwrap != nil {
		return *x.Unwrap
	}
	return false
}

func (x *AppearanceFlags) GetTopeffect() bool {
	if x != nil && x.Topeffect != nil {
		return *x.Topeffect
	}
	return false
}

func (x *AppearanceFlags) GetNpcsaledata() []*AppearanceFlagNPC {
	if x != nil {
		return x.Npcsaledata
	}
	return nil
}

func (x *AppearanceFlags) GetChangedtoexpire() *AppearanceFlagChangedToExpire {
	if x != nil {
		return x.Changedtoexpire
	}
	return nil
}

func (x *AppearanceFlags) GetCorpse() bool {
	if x != nil && x.Corpse != nil {
		return *x.Corpse
	}
	return false
}

func (x *AppearanceFlags) GetPlayerCorpse() bool {
	if x != nil && x.PlayerCorpse != nil {
		return *x.PlayerCorpse
	}
	return false
}

func (x *AppearanceFlags) GetCyclopediaitem() *AppearanceFlagCyclopedia {
	if x != nil {
		return x.Cyclopediaitem
	}
	return nil
}

func (x *AppearanceFlags) GetAmmo() bool {
	if x != nil && x.Ammo != nil {
		return *x.Ammo
	}
	return false
}

func (x *AppearanceFlags) GetShowOffSocket() bool {
	if x != nil && x.ShowOffSocket != nil {
		return *x.ShowOffSocket
	}
	return false
}

func (x *AppearanceFlags) GetReportable() bool {
	if x != nil && x.Reportable != nil {
		return *x.Reportable
	}
	return false
}

func (x *AppearanceFlags) GetUpgradeclassification() *AppearanceFlagUpgradeClassification {
	if x != nil {
		return x.Upgradeclassification
	}
	return nil
}

func (x *AppearanceFlags) GetReverseAddonsEast() bool {
	if x != nil && x.ReverseAddonsEast != nil {
		return *x.ReverseAddonsEast
	}
	return false
}

func (x *AppearanceFlags) GetReverseAddonsWest() bool {
	if x != nil && x.ReverseAddonsWest != nil {
		return *x.ReverseAddonsWest
	}
	return false
}

func (x *AppearanceFlags) GetReverseAddonsSouth() bool {
	if x != nil && x.ReverseAddonsSouth != nil {
		return *x.ReverseAddonsSouth
	}
	return false
}

func (x *AppearanceFlags) GetReverseAddonsNorth() bool {
	if x != nil && x.ReverseAddonsNorth != nil {
		return *x.ReverseAddonsNorth
	}
	return false
}

func (x *AppearanceFlags) GetWearout() bool {
	if x != nil && x.Wearout != nil {
		return *x.Wearout
	}
	return false
}

func (x *AppearanceFlags) GetClockexpire() bool {
	if x != nil && x.Clockexpire != nil {
		return *x.Clockexpire
	}
	return false
}

func (x *AppearanceFlags) GetExpire() bool {
	if x != nil && x.Expire != nil {
		return *x.Expire
	}
	return false
}

func (x *AppearanceFlags) GetExpirestop() bool {
	if x != nil && x.Expirestop != nil {
		return *x.Expirestop
	}
	return false
}

type AppearanceFlagUpgradeClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeClassification *uint32 `protobuf:"varint,1,opt,name=upgrade_classification,json=upgradeClassification" json:"upgrade_classification,omitempty"`
}

func (x *AppearanceFlagUpgradeClassification) Reset() {
	*x = AppearanceFlagUpgradeClassification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagUpgradeClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagUpgradeClassification) ProtoMessage() {}

func (x *AppearanceFlagUpgradeClassification) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagUpgradeClassification.ProtoReflect.Descriptor instead.
func (*AppearanceFlagUpgradeClassification) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{9}
}

func (x *AppearanceFlagUpgradeClassification) GetUpgradeClassification() uint32 {
	if x != nil && x.UpgradeClassification != nil {
		return *x.UpgradeClassification
	}
	return 0
}

type AppearanceFlagBank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Waypoints *uint32 `protobuf:"varint,1,opt,name=waypoints" json:"waypoints,omitempty"`
}

func (x *AppearanceFlagBank) Reset() {
	*x = AppearanceFlagBank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagBank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagBank) ProtoMessage() {}

func (x *AppearanceFlagBank) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagBank.ProtoReflect.Descriptor instead.
func (*AppearanceFlagBank) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{10}
}

func (x *AppearanceFlagBank) GetWaypoints() uint32 {
	if x != nil && x.Waypoints != nil {
		return *x.Waypoints
	}
	return 0
}

type AppearanceFlagWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTextLength *uint32 `protobuf:"varint,1,opt,name=max_text_length,json=maxTextLength" json:"max_text_length,omitempty"`
}

func (x *AppearanceFlagWrite) Reset() {
	*x = AppearanceFlagWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagWrite) ProtoMessage() {}

func (x *AppearanceFlagWrite) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagWrite.ProtoReflect.Descriptor instead.
func (*AppearanceFlagWrite) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{11}
}

func (x *AppearanceFlagWrite) GetMaxTextLength() uint32 {
	if x != nil && x.MaxTextLength != nil {
		return *x.MaxTextLength
	}
	return 0
}

type AppearanceFlagWriteOnce struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTextLengthOnce *uint32 `protobuf:"varint,1,opt,name=max_text_length_once,json=maxTextLengthOnce" json:"max_text_length_once,omitempty"`
}

func (x *AppearanceFlagWriteOnce) Reset() {
	*x = AppearanceFlagWriteOnce{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagWriteOnce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagWriteOnce) ProtoMessage() {}

func (x *AppearanceFlagWriteOnce) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagWriteOnce.ProtoReflect.Descriptor instead.
func (*AppearanceFlagWriteOnce) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{12}
}

func (x *AppearanceFlagWriteOnce) GetMaxTextLengthOnce() uint32 {
	if x != nil && x.MaxTextLengthOnce != nil {
		return *x.MaxTextLengthOnce
	}
	return 0
}

type AppearanceFlagLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brightness *uint32 `protobuf:"varint,1,opt,name=brightness" json:"brightness,omitempty"`
	Color      *uint32 `protobuf:"varint,2,opt,name=color" json:"color,omitempty"`
}

func (x *AppearanceFlagLight) Reset() {
	*x = AppearanceFlagLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagLight) ProtoMessage() {}

func (x *AppearanceFlagLight) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagLight.ProtoReflect.Descriptor instead.
func (*AppearanceFlagLight) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{13}
}

func (x *AppearanceFlagLight) GetBrightness() uint32 {
	if x != nil && x.Brightness != nil {
		return *x.Brightness
	}
	return 0
}

func (x *AppearanceFlagLight) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

type AppearanceFlagHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elevation *uint32 `protobuf:"varint,1,opt,name=elevation" json:"elevation,omitempty"`
}

func (x *AppearanceFlagHeight) Reset() {
	*x = AppearanceFlagHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagHeight) ProtoMessage() {}

func (x *AppearanceFlagHeight) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagHeight.ProtoReflect.Descriptor instead.
func (*AppearanceFlagHeight) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{14}
}

func (x *AppearanceFlagHeight) GetElevation() uint32 {
	if x != nil && x.Elevation != nil {
		return *x.Elevation
	}
	return 0
}

type AppearanceFlagShift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *uint32 `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y *uint32 `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
}

func (x *AppearanceFlagShift) Reset() {
	*x = AppearanceFlagShift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagShift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagShift) ProtoMessage() {}

func (x *AppearanceFlagShift) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagShift.ProtoReflect.Descriptor instead.
func (*AppearanceFlagShift) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{15}
}

func (x *AppearanceFlagShift) GetX() uint32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *AppearanceFlagShift) GetY() uint32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type AppearanceFlagClothes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot *uint32 `protobuf:"varint,1,opt,name=slot" json:"slot,omitempty"`
}

func (x *AppearanceFlagClothes) Reset() {
	*x = AppearanceFlagClothes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagClothes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagClothes) ProtoMessage() {}

func (x *AppearanceFlagClothes) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagClothes.ProtoReflect.Descriptor instead.
func (*AppearanceFlagClothes) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{16}
}

func (x *AppearanceFlagClothes) GetSlot() uint32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

type AppearanceFlagDefaultAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *PLAYER_ACTION `protobuf:"varint,1,opt,name=action,enum=PLAYER_ACTION" json:"action,omitempty"`
}

func (x *AppearanceFlagDefaultAction) Reset() {
	*x = AppearanceFlagDefaultAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagDefaultAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagDefaultAction) ProtoMessage() {}

func (x *AppearanceFlagDefaultAction) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagDefaultAction.ProtoReflect.Descriptor instead.
func (*AppearanceFlagDefaultAction) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{17}
}

func (x *AppearanceFlagDefaultAction) GetAction() PLAYER_ACTION {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return PLAYER_ACTION_PLAYER_ACTION_NONE
}

type AppearanceFlagMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             *ITEM_CATEGORY      `protobuf:"varint,1,opt,name=category,enum=ITEM_CATEGORY" json:"category,omitempty"`
	TradeAsObjectId      *uint32             `protobuf:"varint,2,opt,name=trade_as_object_id,json=tradeAsObjectId" json:"trade_as_object_id,omitempty"`
	ShowAsObjectId       *uint32             `protobuf:"varint,3,opt,name=show_as_object_id,json=showAsObjectId" json:"show_as_object_id,omitempty"`
	RestrictToProfession []PLAYER_PROFESSION `protobuf:"varint,5,rep,name=restrict_to_profession,json=restrictToProfession,enum=PLAYER_PROFESSION" json:"restrict_to_profession,omitempty"`
	MinimumLevel         *uint32             `protobuf:"varint,6,opt,name=minimum_level,json=minimumLevel" json:"minimum_level,omitempty"`
}

func (x *AppearanceFlagMarket) Reset() {
	*x = AppearanceFlagMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagMarket) ProtoMessage() {}

func (x *AppearanceFlagMarket) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagMarket.ProtoReflect.Descriptor instead.
func (*AppearanceFlagMarket) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{18}
}

func (x *AppearanceFlagMarket) GetCategory() ITEM_CATEGORY {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ITEM_CATEGORY_ITEM_CATEGORY_ARMORS
}

func (x *AppearanceFlagMarket) GetTradeAsObjectId() uint32 {
	if x != nil && x.TradeAsObjectId != nil {
		return *x.TradeAsObjectId
	}
	return 0
}

func (x *AppearanceFlagMarket) GetShowAsObjectId() uint32 {
	if x != nil && x.ShowAsObjectId != nil {
		return *x.ShowAsObjectId
	}
	return 0
}

func (x *AppearanceFlagMarket) GetRestrictToProfession() []PLAYER_PROFESSION {
	if x != nil {
		return x.RestrictToProfession
	}
	return nil
}

func (x *AppearanceFlagMarket) GetMinimumLevel() uint32 {
	if x != nil && x.MinimumLevel != nil {
		return *x.MinimumLevel
	}
	return 0
}

type AppearanceFlagNPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                         []byte  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Location                     []byte  `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	SalePrice                    *uint32 `protobuf:"varint,3,opt,name=sale_price,json=salePrice" json:"sale_price,omitempty"`
	BuyPrice                     *uint32 `protobuf:"varint,4,opt,name=buy_price,json=buyPrice" json:"buy_price,omitempty"`
	CurrencyObjectTypeId         *uint32 `protobuf:"varint,5,opt,name=currency_object_type_id,json=currencyObjectTypeId" json:"currency_object_type_id,omitempty"`
	CurrencyQuestFlagDisplayName []byte  `protobuf:"bytes,6,opt,name=currency_quest_flag_display_name,json=currencyQuestFlagDisplayName" json:"currency_quest_flag_display_name,omitempty"`
}

func (x *AppearanceFlagNPC) Reset() {
	*x = AppearanceFlagNPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagNPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagNPC) ProtoMessage() {}

func (x *AppearanceFlagNPC) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagNPC.ProtoReflect.Descriptor instead.
func (*AppearanceFlagNPC) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{19}
}

func (x *AppearanceFlagNPC) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AppearanceFlagNPC) GetLocation() []byte {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *AppearanceFlagNPC) GetSalePrice() uint32 {
	if x != nil && x.SalePrice != nil {
		return *x.SalePrice
	}
	return 0
}

func (x *AppearanceFlagNPC) GetBuyPrice() uint32 {
	if x != nil && x.BuyPrice != nil {
		return *x.BuyPrice
	}
	return 0
}

func (x *AppearanceFlagNPC) GetCurrencyObjectTypeId() uint32 {
	if x != nil && x.CurrencyObjectTypeId != nil {
		return *x.CurrencyObjectTypeId
	}
	return 0
}

func (x *AppearanceFlagNPC) GetCurrencyQuestFlagDisplayName() []byte {
	if x != nil {
		return x.CurrencyQuestFlagDisplayName
	}
	return nil
}

type AppearanceFlagAutomap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color *uint32 `protobuf:"varint,1,opt,name=color" json:"color,omitempty"`
}

func (x *AppearanceFlagAutomap) Reset() {
	*x = AppearanceFlagAutomap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagAutomap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagAutomap) ProtoMessage() {}

func (x *AppearanceFlagAutomap) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagAutomap.ProtoReflect.Descriptor instead.
func (*AppearanceFlagAutomap) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{20}
}

func (x *AppearanceFlagAutomap) GetColor() uint32 {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return 0
}

type AppearanceFlagHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction *HOOK_TYPE `protobuf:"varint,1,opt,name=direction,enum=HOOK_TYPE" json:"direction,omitempty"`
}

func (x *AppearanceFlagHook) Reset() {
	*x = AppearanceFlagHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagHook) ProtoMessage() {}

func (x *AppearanceFlagHook) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagHook.ProtoReflect.Descriptor instead.
func (*AppearanceFlagHook) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{21}
}

func (x *AppearanceFlagHook) GetDirection() HOOK_TYPE {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return HOOK_TYPE_HOOK_TYPE_SOUTH
}

type AppearanceFlagLenshelp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *AppearanceFlagLenshelp) Reset() {
	*x = AppearanceFlagLenshelp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagLenshelp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagLenshelp) ProtoMessage() {}

func (x *AppearanceFlagLenshelp) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagLenshelp.ProtoReflect.Descriptor instead.
func (*AppearanceFlagLenshelp) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{22}
}

func (x *AppearanceFlagLenshelp) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type AppearanceFlagChangedToExpire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormerObjectTypeid *uint32 `protobuf:"varint,1,opt,name=former_object_typeid,json=formerObjectTypeid" json:"former_object_typeid,omitempty"`
}

func (x *AppearanceFlagChangedToExpire) Reset() {
	*x = AppearanceFlagChangedToExpire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagChangedToExpire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagChangedToExpire) ProtoMessage() {}

func (x *AppearanceFlagChangedToExpire) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagChangedToExpire.ProtoReflect.Descriptor instead.
func (*AppearanceFlagChangedToExpire) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{23}
}

func (x *AppearanceFlagChangedToExpire) GetFormerObjectTypeid() uint32 {
	if x != nil && x.FormerObjectTypeid != nil {
		return *x.FormerObjectTypeid
	}
	return 0
}

type AppearanceFlagCyclopedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CyclopediaType *uint32 `protobuf:"varint,1,opt,name=cyclopedia_type,json=cyclopediaType" json:"cyclopedia_type,omitempty"`
}

func (x *AppearanceFlagCyclopedia) Reset() {
	*x = AppearanceFlagCyclopedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppearanceFlagCyclopedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppearanceFlagCyclopedia) ProtoMessage() {}

func (x *AppearanceFlagCyclopedia) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppearanceFlagCyclopedia.ProtoReflect.Descriptor instead.
func (*AppearanceFlagCyclopedia) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{24}
}

func (x *AppearanceFlagCyclopedia) GetCyclopediaType() uint32 {
	if x != nil && x.CyclopediaType != nil {
		return *x.CyclopediaType
	}
	return 0
}

type SpecialMeaningAppearanceIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoldCoinId      *uint32 `protobuf:"varint,1,opt,name=gold_coin_id,json=goldCoinId" json:"gold_coin_id,omitempty"`
	PlatinumCoinId  *uint32 `protobuf:"varint,2,opt,name=platinum_coin_id,json=platinumCoinId" json:"platinum_coin_id,omitempty"`
	CrystalCoinId   *uint32 `protobuf:"varint,3,opt,name=crystal_coin_id,json=crystalCoinId" json:"crystal_coin_id,omitempty"`
	TibiaCoinId     *uint32 `protobuf:"varint,4,opt,name=tibia_coin_id,json=tibiaCoinId" json:"tibia_coin_id,omitempty"`
	StampedLetterId *uint32 `protobuf:"varint,5,opt,name=stamped_letter_id,json=stampedLetterId" json:"stamped_letter_id,omitempty"`
	SupplyStashId   *uint32 `protobuf:"varint,6,opt,name=supply_stash_id,json=supplyStashId" json:"supply_stash_id,omitempty"`
}

func (x *SpecialMeaningAppearanceIds) Reset() {
	*x = SpecialMeaningAppearanceIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_appearances_appearances_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialMeaningAppearanceIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialMeaningAppearanceIds) ProtoMessage() {}

func (x *SpecialMeaningAppearanceIds) ProtoReflect() protoreflect.Message {
	mi := &file_appearances_appearances_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialMeaningAppearanceIds.ProtoReflect.Descriptor instead.
func (*SpecialMeaningAppearanceIds) Descriptor() ([]byte, []int) {
	return file_appearances_appearances_proto_rawDescGZIP(), []int{25}
}

func (x *SpecialMeaningAppearanceIds) GetGoldCoinId() uint32 {
	if x != nil && x.GoldCoinId != nil {
		return *x.GoldCoinId
	}
	return 0
}

func (x *SpecialMeaningAppearanceIds) GetPlatinumCoinId() uint32 {
	if x != nil && x.PlatinumCoinId != nil {
		return *x.PlatinumCoinId
	}
	return 0
}

func (x *SpecialMeaningAppearanceIds) GetCrystalCoinId() uint32 {
	if x != nil && x.CrystalCoinId != nil {
		return *x.CrystalCoinId
	}
	return 0
}

func (x *SpecialMeaningAppearanceIds) GetTibiaCoinId() uint32 {
	if x != nil && x.TibiaCoinId != nil {
		return *x.TibiaCoinId
	}
	return 0
}

func (x *SpecialMeaningAppearanceIds) GetStampedLetterId() uint32 {
	if x != nil && x.StampedLetterId != nil {
		return *x.StampedLetterId
	}
	return 0
}

func (x *SpecialMeaningAppearanceIds) GetSupplyStashId() uint32 {
	if x != nil && x.SupplyStashId != nil {
		return *x.SupplyStashId
	}
	return 0
}

var File_appearances_appearances_proto protoreflect.FileDescriptor

var file_appearances_appearances_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x36, 0x0a, 0x0a, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x7a, 0x22, 0x86, 0x02, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x66, 0x69, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x66, 0x69,
	0x74, 0x12, 0x23, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6c, 0x65, 0x12, 0x61, 0x0a,
	0x1e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4d,
	0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x52, 0x1b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x61, 0x6e,
	0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x53, 0x0a, 0x0b, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x22, 0x96, 0x02, 0x0a, 0x0f, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79, 0x6e,
	0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6c,
	0x6f, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x0c, 0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x0b, 0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x22, 0x4f,
	0x0a, 0x03, 0x42, 0x6f, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0xeb, 0x02, 0x0a, 0x0a, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x70, 0x72, 0x69,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x2e, 0x0a,
	0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x1a, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04,
	0x2e, 0x42, 0x6f, 0x78, 0x52, 0x17, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f,
	0x78, 0x50, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01,
	0x0a, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x11,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x52, 0x0f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0b,
	0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x10, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x61, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x62, 0x61,
	0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x63, 0x6c, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74, 0x6f, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x75,
	0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x75,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x75, 0x73, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x75, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x4f, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f,
	0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x70, 0x6f, 0x6f,
	0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x70,
	0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x70, 0x61, 0x73, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x70, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x6e, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x76,
	0x6f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x6f, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x6e, 0x6f, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x6e, 0x67, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x61, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x04, 0x68, 0x6f, 0x6f,
	0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x68, 0x6f,
	0x6f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x05, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x68,
	0x69, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x6f, 0x6e, 0x74, 0x48,
	0x69, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x05, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x70, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x08,
	0x6c, 0x65, 0x6e, 0x73, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4c,
	0x65, 0x6e, 0x73, 0x68, 0x65, 0x6c, 0x70, 0x52, 0x08, 0x6c, 0x65, 0x6e, 0x73, 0x68, 0x65, 0x6c,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x12, 0x30,
	0x0a, 0x07, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x43, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x72, 0x61, 0x70, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x77, 0x72, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x77, 0x72,
	0x61, 0x70, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x34,
	0x0a, 0x0b, 0x6e, 0x70, 0x63, 0x73, 0x61, 0x6c, 0x65, 0x64, 0x61, 0x74, 0x61, 0x18, 0x28, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x4e, 0x50, 0x43, 0x52, 0x0b, 0x6e, 0x70, 0x63, 0x73, 0x61, 0x6c, 0x65,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x74,
	0x6f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x52, 0x0f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x74, 0x6f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x72, 0x70, 0x73, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x63, 0x6f, 0x72, 0x70, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x72, 0x70, 0x73, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x70, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63,
	0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x43, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x52, 0x0e,
	0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x6d, 0x6d, 0x6f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x61, 0x6d,
	0x6d, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x68, 0x6f,
	0x77, 0x4f, 0x66, 0x66, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5a, 0x0a, 0x15, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x15, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x61, 0x73, 0x74, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x45, 0x61, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x77, 0x65, 0x73, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x57, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x53, 0x6f, 0x75, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x74, 0x68,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65,
	0x61, 0x72, 0x6f, 0x75, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x65, 0x61,
	0x72, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x70, 0x22, 0x5c,
	0x0a, 0x23, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x12,
	0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x61,
	0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0x3d, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x78, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0x4a, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x54, 0x65, 0x78,
	0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x4f, 0x6e, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x13, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x34, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31,
	0x0a, 0x13, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01,
	0x79, 0x22, 0x2b, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x43, 0x6c, 0x6f, 0x74, 0x68, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0x45,
	0x0a, 0x1b, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x61, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x52, 0x14, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x54, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0xfe, 0x01, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x4e, 0x50, 0x43, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x61, 0x6c,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x22, 0x3e, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x28, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x48, 0x4f, 0x4f,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x28, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x4c, 0x65, 0x6e, 0x73, 0x68, 0x65, 0x6c, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x1d, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x69, 0x64, 0x22, 0x43,
	0x0a, 0x18, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x43, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x79,
	0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x1b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4d,
	0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x43,
	0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x72, 0x79, 0x73, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x62, 0x69, 0x61,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x69, 0x62, 0x69, 0x61, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x73, 0x68, 0x49, 0x64, 0x2a,
	0x94, 0x01, 0x0a, 0x0d, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03,
	0x12, 0x24, 0x0a, 0x20, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x57, 0x41, 0x4c, 0x4b, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x2a, 0xcd, 0x05, 0x0a, 0x0d, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x4d, 0x4f, 0x52, 0x53,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x4d, 0x55, 0x4c, 0x45, 0x54, 0x53, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x42,
	0x4f, 0x4f, 0x54, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x52, 0x53, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x48, 0x45, 0x4c, 0x4d,
	0x45, 0x54, 0x53, 0x5f, 0x48, 0x41, 0x54, 0x53, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x47, 0x53,
	0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x4f,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x0b,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x52, 0x55, 0x4e, 0x45, 0x53, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c,
	0x44, 0x53, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x4f, 0x4f, 0x4c, 0x53, 0x10, 0x0e, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x58, 0x45, 0x53, 0x10, 0x11,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x53, 0x10, 0x12, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x53, 0x10, 0x13, 0x12, 0x18, 0x0a,
	0x14, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53,
	0x57, 0x4f, 0x52, 0x44, 0x53, 0x10, 0x14, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x57, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x52,
	0x4f, 0x44, 0x53, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x53,
	0x43, 0x52, 0x4f, 0x4c, 0x4c, 0x53, 0x10, 0x16, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x49, 0x42, 0x49, 0x41, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x53, 0x10, 0x17, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x51, 0x55,
	0x49, 0x56, 0x45, 0x52, 0x10, 0x19, 0x2a, 0xed, 0x01, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x12, 0x22, 0x0a, 0x15,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4b, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x41, 0x4c, 0x41, 0x44, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x4f, 0x52, 0x43, 0x45, 0x52, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x52, 0x55, 0x49, 0x44, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4d,
	0x4f, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x2a, 0x83, 0x01, 0x0a, 0x13, 0x41, 0x4e, 0x49, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x29,
	0x0a, 0x1c, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x4f, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x4e, 0x47, 0x50, 0x4f, 0x4e, 0x47, 0x10, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x4e, 0x49,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x41,
	0x4e, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x34, 0x0a, 0x09,
	0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x4f, 0x4f,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x54, 0x48, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x41, 0x53, 0x54,
	0x10, 0x02, 0x2a, 0x81, 0x01, 0x0a, 0x11, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x55,
	0x54, 0x46, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x46,
	0x49, 0x58, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4f, 0x55, 0x54, 0x46, 0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x42, 0x15, 0x5a, 0x13, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x3b, 0x67, 0x65, 0x6e,
}

var (
	file_appearances_appearances_proto_rawDescOnce sync.Once
	file_appearances_appearances_proto_rawDescData = file_appearances_appearances_proto_rawDesc
)

func file_appearances_appearances_proto_rawDescGZIP() []byte {
	file_appearances_appearances_proto_rawDescOnce.Do(func() {
		file_appearances_appearances_proto_rawDescData = protoimpl.X.CompressGZIP(file_appearances_appearances_proto_rawDescData)
	})
	return file_appearances_appearances_proto_rawDescData
}

var file_appearances_appearances_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_appearances_appearances_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_appearances_appearances_proto_goTypes = []interface{}{
	(PLAYER_ACTION)(0),                          // 0: PLAYER_ACTION
	(ITEM_CATEGORY)(0),                          // 1: ITEM_CATEGORY
	(PLAYER_PROFESSION)(0),                      // 2: PLAYER_PROFESSION
	(ANIMATION_LOOP_TYPE)(0),                    // 3: ANIMATION_LOOP_TYPE
	(HOOK_TYPE)(0),                              // 4: HOOK_TYPE
	(FIXED_FRAME_GROUP)(0),                      // 5: FIXED_FRAME_GROUP
	(*Coordinate)(nil),                          // 6: Coordinate
	(*Appearances)(nil),                         // 7: Appearances
	(*SpritePhase)(nil),                         // 8: SpritePhase
	(*SpriteAnimation)(nil),                     // 9: SpriteAnimation
	(*Box)(nil),                                 // 10: Box
	(*SpriteInfo)(nil),                          // 11: SpriteInfo
	(*FrameGroup)(nil),                          // 12: FrameGroup
	(*Appearance)(nil),                          // 13: Appearance
	(*AppearanceFlags)(nil),                     // 14: AppearanceFlags
	(*AppearanceFlagUpgradeClassification)(nil), // 15: AppearanceFlagUpgradeClassification
	(*AppearanceFlagBank)(nil),                  // 16: AppearanceFlagBank
	(*AppearanceFlagWrite)(nil),                 // 17: AppearanceFlagWrite
	(*AppearanceFlagWriteOnce)(nil),             // 18: AppearanceFlagWriteOnce
	(*AppearanceFlagLight)(nil),                 // 19: AppearanceFlagLight
	(*AppearanceFlagHeight)(nil),                // 20: AppearanceFlagHeight
	(*AppearanceFlagShift)(nil),                 // 21: AppearanceFlagShift
	(*AppearanceFlagClothes)(nil),               // 22: AppearanceFlagClothes
	(*AppearanceFlagDefaultAction)(nil),         // 23: AppearanceFlagDefaultAction
	(*AppearanceFlagMarket)(nil),                // 24: AppearanceFlagMarket
	(*AppearanceFlagNPC)(nil),                   // 25: AppearanceFlagNPC
	(*AppearanceFlagAutomap)(nil),               // 26: AppearanceFlagAutomap
	(*AppearanceFlagHook)(nil),                  // 27: AppearanceFlagHook
	(*AppearanceFlagLenshelp)(nil),              // 28: AppearanceFlagLenshelp
	(*AppearanceFlagChangedToExpire)(nil),       // 29: AppearanceFlagChangedToExpire
	(*AppearanceFlagCyclopedia)(nil),            // 30: AppearanceFlagCyclopedia
	(*SpecialMeaningAppearanceIds)(nil),         // 31: SpecialMeaningAppearanceIds
}
var file_appearances_appearances_proto_depIdxs = []int32{
	13, // 0: Appearances.object:type_name -> Appearance
	13, // 1: Appearances.outfit:type_name -> Appearance
	13, // 2: Appearances.effect:type_name -> Appearance
	13, // 3: Appearances.missile:type_name -> Appearance
	31, // 4: Appearances.special_meaning_appearance_ids:type_name -> SpecialMeaningAppearanceIds
	3,  // 5: SpriteAnimation.loop_type:type_name -> ANIMATION_LOOP_TYPE
	8,  // 6: SpriteAnimation.sprite_phase:type_name -> SpritePhase
	9,  // 7: SpriteInfo.animation:type_name -> SpriteAnimation
	10, // 8: SpriteInfo.bounding_box_per_direction:type_name -> Box
	5,  // 9: FrameGroup.fixed_frame_group:type_name -> FIXED_FRAME_GROUP
	11, // 10: FrameGroup.sprite_info:type_name -> SpriteInfo
	12, // 11: Appearance.frame_group:type_name -> FrameGroup
	14, // 12: Appearance.flags:type_name -> AppearanceFlags
	16, // 13: AppearanceFlags.bank:type_name -> AppearanceFlagBank
	17, // 14: AppearanceFlags.write:type_name -> AppearanceFlagWrite
	18, // 15: AppearanceFlags.write_once:type_name -> AppearanceFlagWriteOnce
	27, // 16: AppearanceFlags.hook:type_name -> AppearanceFlagHook
	19, // 17: AppearanceFlags.light:type_name -> AppearanceFlagLight
	21, // 18: AppearanceFlags.shift:type_name -> AppearanceFlagShift
	20, // 19: AppearanceFlags.height:type_name -> AppearanceFlagHeight
	26, // 20: AppearanceFlags.automap:type_name -> AppearanceFlagAutomap
	28, // 21: AppearanceFlags.lenshelp:type_name -> AppearanceFlagLenshelp
	22, // 22: AppearanceFlags.clothes:type_name -> AppearanceFlagClothes
	23, // 23: AppearanceFlags.default_action:type_name -> AppearanceFlagDefaultAction
	24, // 24: AppearanceFlags.market:type_name -> AppearanceFlagMarket
	25, // 25: AppearanceFlags.npcsaledata:type_name -> AppearanceFlagNPC
	29, // 26: AppearanceFlags.changedtoexpire:type_name -> AppearanceFlagChangedToExpire
	30, // 27: AppearanceFlags.cyclopediaitem:type_name -> AppearanceFlagCyclopedia
	15, // 28: AppearanceFlags.upgradeclassification:type_name -> AppearanceFlagUpgradeClassification
	0,  // 29: AppearanceFlagDefaultAction.action:type_name -> PLAYER_ACTION
	1,  // 30: AppearanceFlagMarket.category:type_name -> ITEM_CATEGORY
	2,  // 31: AppearanceFlagMarket.restrict_to_profession:type_name -> PLAYER_PROFESSION
	4,  // 32: AppearanceFlagHook.direction:type_name -> HOOK_TYPE
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_appearances_appearances_proto_init() }
func file_appearances_appearances_proto_init() {
	if File_appearances_appearances_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_appearances_appearances_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appearances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpritePhase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpriteAnimation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Box); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpriteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Appearance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagUpgradeClassification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagBank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagWriteOnce); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagShift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagClothes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagDefaultAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagNPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagAutomap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagLenshelp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagChangedToExpire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppearanceFlagCyclopedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_appearances_appearances_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialMeaningAppearanceIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_appearances_appearances_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_appearances_appearances_proto_goTypes,
		DependencyIndexes: file_appearances_appearances_proto_depIdxs,
		EnumInfos:         file_appearances_appearances_proto_enumTypes,
		MessageInfos:      file_appearances_appearances_proto_msgTypes,
	}.Build()
	File_appearances_appearances_proto = out.File
	file_appearances_appearances_proto_rawDesc = nil
	file_appearances_appearances_proto_goTypes = nil
	file_appearances_appearances_proto_depIdxs = nil
}
